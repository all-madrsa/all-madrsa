<!doctype html>
<html lang="hi">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>Vasai Live News â€” Mobile Friendly</title>
<script src="https://cdn.tailwindcss.com"></script>
<style>
  body{background:#f6f7fb;color:#0b2540;font-family:Arial,sans-serif;}
  .card{background:#fff;border-radius:10px;overflow:hidden;box-shadow:0 6px 20px rgba(2,6,23,0.06);padding:12px;margin-bottom:12px;}
  .card h3{font-weight:700;margin-bottom:4px;font-size:18px;}
  .card .meta{font-size:12px;color:#6b7280;margin-bottom:6px;}
  .modal-bg{display:none;position:fixed;inset:0;background:rgba(0,0,0,0.5);justify-content:center;align-items:center;z-index:50;}
  .modal{background:#fff;border-radius:10px;max-width:500px;width:90%;max-height:80%;overflow-y:auto;padding:16px;position:relative;}
  .modal-close{position:absolute;top:8px;right:8px;background:#f87171;color:white;border:none;border-radius:4px;padding:2px 6px;cursor:pointer;}
  textarea{resize:none;}
</style>
</head>
<body class="p-4">

<header class="flex justify-between items-center mb-4">
  <h1 class="text-xl font-bold">Vasai Live News</h1>
  <div>
    <button id="loginBtn" class="bg-blue-700 text-white px-3 py-1 rounded">Admin Login</button>
    <button id="logoutBtn" class="hidden bg-red-600 text-white px-3 py-1 rounded">Logout</button>
  </div>
</header>

<!-- ADMIN PANEL -->
<section id="editorArea" class="hidden p-4 mb-4 bg-white rounded shadow">
  <h2 class="font-semibold mb-2">Create / Edit Post</h2>
  <input id="aTitle" class="border p-2 w-full mb-2 rounded" placeholder="Title">
  <input id="aCat" class="border p-2 w-full mb-2 rounded" placeholder="Category">
  
  <div class="flex gap-2 mb-2">
    <button id="addTextBtn" class="bg-gray-200 px-3 py-1 rounded">Add Text Block</button>
    <button id="addImageBtn" class="bg-gray-200 px-3 py-1 rounded">Add Image Block</button>
  </div>
  
  <div id="blocksList" class="mb-3"></div>
  
  <div class="flex gap-2">
    <button id="publishBtn" class="bg-blue-700 text-white px-4 py-2 rounded">Publish</button>
    <button id="clearBtn" class="bg-gray-200 px-4 py-2 rounded">Clear</button>
  </div>
</section>

<!-- POSTS LIST -->
<section id="postsArea"></section>

<!-- MODAL FOR FULL NEWS -->
<div id="modalBg" class="modal-bg flex">
  <div class="modal">
    <button id="modalClose" class="modal-close">X</button>
    <div id="modalContent"></div>
  </div>
</div>

<!-- Firebase v9 modular -->
<script type="module">
import { initializeApp } from "https://www.gstatic.com/firebasejs/9.23.0/firebase-app.js";
import { getAuth, GoogleAuthProvider, signInWithPopup, signOut, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/9.23.0/firebase-auth.js";
import { getFirestore, collection, addDoc, getDocs, query, orderBy, doc, updateDoc, deleteDoc } from "https://www.gstatic.com/firebasejs/9.23.0/firebase-firestore.js";

const firebaseConfig = {
  apiKey: "AIzaSyDMvkPqFKDjrMaLlBkercBYoLxEs1GEbng",
  authDomain: "all-madrsa.firebaseapp.com",
  projectId: "all-madrsa",
  storageBucket: "all-madrsa.appspot.com",
  messagingSenderId: "619313835874",
  appId: "1:619313835874:web:312ec03e62fd49d3d92e60"
};

const IMGBB_API_KEY = "c4bc97c133edb76e062de6d070df67e4";
const ADMIN_EMAIL = "zaradigitalseva@gmail.com";

const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);

const loginBtn = document.getElementById("loginBtn");
const logoutBtn = document.getElementById("logoutBtn");
const editorArea = document.getElementById("editorArea");
const blocksList = document.getElementById("blocksList");
const postsArea = document.getElementById("postsArea");
const aTitle = document.getElementById("aTitle");
const aCat = document.getElementById("aCat");
const publishBtn = document.getElementById("publishBtn");
const clearBtn = document.getElementById("clearBtn");
const modalBg = document.getElementById("modalBg");
const modalContent = document.getElementById("modalContent");
const modalClose = document.getElementById("modalClose");

let editingId = null;

// ðŸ”¹ LOGIN / LOGOUT
loginBtn.onclick = async () => {
  const provider = new GoogleAuthProvider();
  try { await signInWithPopup(auth, provider); } 
  catch(e){ alert("Login failed"); console.error(e); }
};
logoutBtn.onclick = async () => await signOut(auth);

// ðŸ”¹ AUTH STATE
onAuthStateChanged(auth, user => {
  if(user && user.email===ADMIN_EMAIL){
    loginBtn.classList.add("hidden");
    logoutBtn.classList.remove("hidden");
    editorArea.classList.remove("hidden");
  } else {
    loginBtn.classList.remove("hidden");
    logoutBtn.classList.add("hidden");
    editorArea.classList.add("hidden");
  }
  loadPosts();
});

// ðŸ”¹ ADD BLOCKS
document.getElementById("addTextBtn").onclick = () => {
  const t = document.createElement("textarea");
  t.className = "border w-full p-2 rounded mt-2";
  t.placeholder = "Text...";
  blocksList.appendChild(t);
};
document.getElementById("addImageBtn").onclick = () => {
  const div = document.createElement("div");
  div.className = "mt-2";
  const inputFile = document.createElement("input");
  inputFile.type = "file";
  inputFile.accept = "image/*";
  inputFile.className = "border p-1 rounded w-full";
  const urlInput = document.createElement("input");
  urlInput.type = "text";
  urlInput.placeholder = "Uploaded URL";
  urlInput.className = "border p-1 rounded w-full mt-1";
  div.appendChild(inputFile);
  div.appendChild(urlInput);
  blocksList.appendChild(div);

  inputFile.addEventListener("change", async () => {
    if(!inputFile.files.length) return;
    const file = inputFile.files[0];
    const form = new FormData();
    form.append("image", file);
    try{
      const res = await fetch(`https://api.imgbb.com/1/upload?key=${IMGBB_API_KEY}`, { method:"POST", body:form });
      const data = await res.json();
      if(data.success){ urlInput.value = data.data.url; alert("Image uploaded"); }
      else throw new Error("Upload failed");
    } catch(e){ alert("Upload failed"); console.error(e); }
  });
};

// ðŸ”¹ PUBLISH / EDIT
publishBtn.onclick = async () => {
  const user = auth.currentUser;
  if(!user || user.email!==ADMIN_EMAIL) return alert("Only admin can post!");
  const title = aTitle.value.trim();
  const category = aCat.value.trim();
  if(!title) return alert("Title required");

  const blocks = [];
  for(const el of blocksList.children){
    if(el.tagName==="TEXTAREA") blocks.push({type:"text", text:el.value});
    else if(el.querySelector("input[type=text]")) blocks.push({type:"image", url:el.querySelector("input[type=text]").value});
  }
  if(blocks.length===0) return alert("Add text or image block");

  try{
    if(editingId){
      await updateDoc(doc(db,"vasai_news",editingId), { title, category, blocks });
      editingId=null;
      alert("Post updated!");
    } else {
      await addDoc(collection(db,"vasai_news"), { title, category, blocks, ts:Date.now(), author:user.email });
      alert("Post published!");
    }
    aTitle.value=""; aCat.value=""; blocksList.innerHTML="";
    loadPosts();
  } catch(e){ alert("Publish failed"); console.error(e); }
};

// ðŸ”¹ CLEAR
clearBtn.onclick = () => { aTitle.value=""; aCat.value=""; blocksList.innerHTML=""; editingId=null; };

// ðŸ”¹ LOAD POSTS
async function loadPosts(){
  postsArea.innerHTML="";
  const q = query(collection(db,"vasai_news"), orderBy("ts","desc"));
  const snap = await getDocs(q);
  snap.forEach(docSnap => {
    const d = docSnap.data();
    const card = document.createElement("div");
    card.className="card";
    card.innerHTML = `<h3>${d.title}</h3><div class="meta">${d.category} â€¢ ${new Date(d.ts).toLocaleString()}</div>`;

    card.onclick = () => {
      modalContent.innerHTML = `<h2 class="text-lg font-bold mb-2">${d.title}</h2><div class="meta mb-2">${d.category}</div>`;
      d.blocks.forEach(b=>{
        if(b.type==="text") modalContent.innerHTML += `<p class="mb-2">${b.text}</p>`;
        else if(b.type==="image") modalContent.innerHTML += `<img src="${b.url}" class="w-full mb-2 rounded">`;
      });
      // Admin buttons
      const user = auth.currentUser;
      if(user && user.email===ADMIN_EMAIL){
        const editBtn = document.createElement("button"); editBtn.className="bg-gray-200 px-3 py-1 rounded mr-2"; editBtn.textContent="Edit";
        const delBtn = document.createElement("button"); delBtn.className="bg-red-500 text-white px-3 py-1 rounded"; delBtn.textContent="Delete";
        editBtn.onclick = (e)=>{
          e.stopPropagation(); editingId=docSnap.id;
          aTitle.value=d.title; aCat.value=d.category; blocksList.innerHTML="";
          d.blocks.forEach(b=>{
            if(b.type==="text"){ const t=document.createElement("textarea"); t.className="border w-full p-2 rounded mt-2"; t.value=b.text; blocksList.appendChild(t);}
            else if(b.type==="image"){ 
              const div = document.createElement("div"); 
              div.className="mt-2"; 
              const inputFile = document.createElement("input"); inputFile.type="file"; inputFile.accept="image/*"; inputFile.className="border p-1 rounded w-full"; 
              const urlInput = document.createElement("input"); urlInput.type="text"; urlInput.className="border p-1 rounded w-full mt-1"; urlInput.value=b.url;
              div.appendChild(inputFile); div.appendChild(urlInput); blocksList.appendChild(div);
            }
          });
          modalBg.style.display="none";
        };
        delBtn.onclick = async (e)=>{
          e.stopPropagation(); if(confirm("Delete this post?")) await deleteDoc(doc(db,"vasai_news",docSnap.id)).then(()=>loadPosts());
          modalBg.style.display="none";
        };
        modalContent.appendChild(editBtn);
        modalContent.appendChild(delBtn);
      }

      modalBg.style.display="flex";
    };

    postsArea.appendChild(card);
  });
}

// ðŸ”¹ MODAL CLOSE
modalClose.onclick = ()=>{modalBg.style.display="none";}
modalBg.onclick = e=>{ if(e.target===modalBg) modalBg.style.display="none"; }

</script>
</body>
</html>
