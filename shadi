<!doctype html>
<html lang="hi">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>Nikah Portal — Mobile Friendly & Realtime</title>
<script src="https://cdn.tailwindcss.com"></script>
<style>
.card-gradient { background: linear-gradient(90deg,#ffffff 0%,#f8fafc 100%); }
</style>
</head>
<body class="bg-gray-50 text-gray-800">

<header class="bg-white shadow sticky top-0 z-40">
  <div class="max-w-6xl mx-auto px-4 py-4 flex items-center justify-between">
    <div class="flex items-center gap-3">
      <div class="w-12 h-12 bg-green-600 text-white rounded-lg flex items-center justify-center font-bold text-xl">N</div>
      <div>
        <h1 class="text-xl font-semibold">Nikah Portal</h1>
        <p class="text-sm text-gray-500">Shadi-style matrimonial site</p>
      </div>
    </div>
    <button id="adminBtn" class="hidden bg-blue-600 text-white px-3 py-1 rounded text-sm">Admin Panel</button>
  </div>
</header>

<main class="max-w-6xl mx-auto px-4 py-6">
  <!-- Hero -->
  <section class="bg-white rounded-lg shadow p-6 mb-6 card-gradient">
    <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
      <div>
        <h2 class="text-2xl font-bold">Apni shaadi ka safar yahin se shuru karein</h2>
        <p class="text-gray-600 mt-1">Profile upload karein — admin approval ke baad public honge.</p>
      </div>
      <div class="w-full md:w-1/2">
        <div class="grid grid-cols-1 sm:grid-cols-3 gap-2">
          <input id="filterName" type="text" placeholder="Name / City" class="border rounded px-3 py-2" />
          <select id="filterGender" class="border rounded px-3 py-2">
            <option value="">Gender</option>
            <option value="पुरुष">पुरुष</option>
            <option value="महिला">महिला</option>
          </select>
          <button id="filterBtn" class="bg-green-600 text-white rounded px-3 py-2">Filter</button>
        </div>
      </div>
    </div>
  </section>

  <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
    <!-- Left: Post form -->
    <aside class="lg:col-span-1">
      <div class="bg-white rounded-lg shadow p-5">
        <h3 class="text-lg font-semibold mb-3">Profile Post Karein</h3>
        <form id="postForm" class="space-y-3">
          <input name="name" placeholder="पूरा नाम" class="w-full border rounded px-3 py-2" required />
          <input name="age" type="number" placeholder="उम्र" class="w-full border rounded px-3 py-2" required />
          <input name="city" placeholder="City" class="w-full border rounded px-3 py-2" />
          <select name="gender" class="w-full border rounded px-3 py-2" required>
            <option value="">लिंग चुनें</option>
            <option value="पुरुष">पुरुष</option>
            <option value="महिला">महिला</option>
          </select>
          <textarea name="about" rows="3" placeholder="Thoda sa intro (optional)" class="w-full border rounded px-3 py-2"></textarea>
          <input name="contact" placeholder="Contact (optional)" class="w-full border rounded px-3 py-2" />
          <label class="block text-sm text-gray-600">Profile Photo (max 2MB)</label>
          <input name="image" type="file" accept="image/*" class="w-full" required />
          <div class="flex items-center gap-2">
            <button type="submit" class="bg-green-600 text-white px-4 py-2 rounded">Post Profile</button>
            <div id="postingStatus" class="text-sm text-gray-600"></div>
          </div>
        </form>
        <div class="mt-4 text-xs text-gray-500">Note: Profiles admin approval ke baad public honge.</div>
      </div>
    </aside>

    <!-- Profiles -->
    <section class="lg:col-span-2">
      <div class="bg-white rounded-lg shadow p-4 mb-4">
        <h3 class="text-lg font-semibold">Public Profiles</h3>
        <div class="text-sm text-gray-500">Filtered & approved profiles yahan dikhte hain.</div>
      </div>
      <div id="profilesGrid" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4"></div>
    </section>
  </div>

  <!-- Admin Panel -->
  <div id="adminPanel" class="fixed inset-0 z-50 hidden items-start justify-center p-6 bg-black/50">
    <div class="bg-white w-full max-w-4xl rounded-lg shadow-lg overflow-auto max-h-[90vh]">
      <div class="flex items-center justify-between p-4 border-b">
        <h2 class="text-lg font-semibold">Admin Panel</h2>
        <button id="adminClose" class="text-gray-600 px-3 py-1">Close</button>
      </div>

      <div class="p-4 grid grid-cols-1 lg:grid-cols-2 gap-4">
        <div>
          <h3 class="font-semibold mb-2">Pending Profiles</h3>
          <ul id="pendingList" class="space-y-3 max-h-80 overflow-auto"></ul>
        </div>

        <div>
          <h3 class="font-semibold mb-2">Approved Profiles (Admin View)</h3>
          <ul id="approvedAdminList" class="space-y-3 max-h-80 overflow-auto"></ul>

          <div class="mt-4">
            <h4 class="font-medium mb-2">Post Notice</h4>
            <form id="noticeForm" class="flex gap-2">
              <input name="notice" placeholder="Notice text..." class="flex-1 border rounded px-3 py-2" />
              <button class="bg-blue-600 text-white px-3 py-2 rounded">Post</button>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>
</main>

<script type="module">
import { initializeApp } from "https://www.gstatic.com/firebasejs/9.23.0/firebase-app.js";
import { getFirestore, collection, addDoc, query, where, updateDoc, doc, deleteDoc, onSnapshot } from "https://www.gstatic.com/firebasejs/9.23.0/firebase-firestore.js";
import { getAuth, signInWithEmailAndPassword, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/9.23.0/firebase-auth.js";

const firebaseConfig = {
  apiKey: "AIzaSyDMvkPqFKDjrMaLlBkercBYoLxEs1GEbng",
  authDomain: "all-madrsa.firebaseapp.com",
  projectId: "all-madrsa",
  storageBucket: "all-madrsa.appspot.com",
  messagingSenderId: "619313835874",
  appId: "1:619313835874:web:e387e1297663f11fc2463b"
};
const IMG_API_KEY = "d12c2e4a8650157b2b6b9fe85336ea43";

const adminEmail = "";      // admin email
const adminPassword = "";   // admin password

const app = initializeApp(firebaseConfig);
const db = getFirestore(app);
const auth = getAuth(app);

const postForm = document.getElementById('postForm');
const postingStatus = document.getElementById('postingStatus');
const profilesGrid = document.getElementById('profilesGrid');
const pendingList = document.getElementById('pendingList');
const approvedAdminList = document.getElementById('approvedAdminList');
const adminPanel = document.getElementById('adminPanel');
const adminBtn = document.getElementById('adminBtn');
const adminClose = document.getElementById('adminClose');
const noticeForm = document.getElementById('noticeForm');

let currentAdmin = null;

function esc(s){ if(!s) return ""; return String(s).replaceAll("&","&amp;").replaceAll("<","&lt;").replaceAll(">","&gt;"); }

async function uploadToImgbb(file){
  const fd = new FormData();
  fd.append('image',file);
  const res = await fetch(`https://api.imgbb.com/1/upload?key=${IMG_API_KEY}`, { method:'POST', body:fd });
  const data = await res.json();
  if(data && data.success) return data.data.display_url;
  throw new Error('Image upload failed');
}

// ---------------- Post Profile ----------------
postForm.addEventListener('submit', async (e)=>{
  e.preventDefault();
  postingStatus.textContent = "Posting...";
  const f = new FormData(postForm);
  const name = f.get('name')?.trim();
  const age = f.get('age')?.trim();
  const gender = f.get('gender')?.trim();
  const about = f.get('about')?.trim();
  const city = f.get('city')?.trim();
  const contact = f.get('contact')?.trim();
  const imageFile = f.get('image');

  if(!name || !age || !gender || !imageFile || imageFile.size===0){
    postingStatus.textContent = "Please fill required fields.";
    setTimeout(()=>postingStatus.textContent="",2000);
    return;
  }
  if(imageFile.size>2*1024*1024){
    postingStatus.textContent = "Image must be < 2MB.";
    setTimeout(()=>postingStatus.textContent="",2000);
    return;
  }

  try{
    const imageUrl = await uploadToImgbb(imageFile);
    await addDoc(collection(db,'profiles'), { name, age, gender, about, city, contact, imageUrl, approved: false, createdAt: Date.now() });
    postingStatus.textContent = "Submitted — admin approval pending.";
    postForm.reset();
    setTimeout(()=>postingStatus.textContent="",3000);
  }catch(err){
    console.error(err);
    postingStatus.textContent = "Posting failed.";
    setTimeout(()=>postingStatus.textContent="",3000);
  }
});

// ---------------- Real-time Listeners ----------------
function listenApprovedProfiles(){
  const q = query(collection(db,'profiles'), where('approved','==', true));
  onSnapshot(q, snap => {
    profilesGrid.innerHTML = "";
    const arr = [];
    snap.forEach(s=>arr.push({id:s.id,...s.data()}));
    arr.sort((a,b)=>(b.createdAt||0)-(a.createdAt||0));

    const nameFilter = document.getElementById('filterName').value.trim().toLowerCase();
    const genderFilter = document.getElementById('filterGender').value;

    const filtered = arr.filter(p=>{
      if(nameFilter && !(`${p.name} ${p.city||''}`).toLowerCase().includes(nameFilter)) return false;
      if(genderFilter && p.gender!==genderFilter) return false;
      return true;
    });

    if(filtered.length===0){
      profilesGrid.innerHTML = `<div class="col-span-1 lg:col-span-4 bg-white p-6 rounded text-gray-500">No profiles found.</div>`;
      return;
    }

    filtered.forEach(p=>{
      const card = document.createElement('div');
      card.className = 'bg-white rounded-lg shadow overflow-hidden flex flex-col';
      card.innerHTML = `
        <div class="relative w-full aspect-[4/5] bg-gray-100 overflow-hidden">
          <img src="${esc(p.imageUrl)}" alt="${esc(p.name)}" class="w-full h-full object-cover">
        </div>
        <div class="p-3 flex-1 flex flex-col justify-between">
          <div>
            <h4 class="font-semibold text-lg">${esc(p.name)}, <span class="text-sm font-medium text-gray-600">${esc(p.age)}</span></h4>
            <div class="text-sm text-gray-500">${esc(p.city||'')} · ${esc(p.gender)}</div>
            <p class="mt-2 text-sm text-gray-600">${esc(p.about||'')}</p>
          </div>
          <div class="mt-2 text-sm text-gray-700">${p.contact ? 'Contact: '+esc(p.contact) : ''}</div>
        </div>
      `;
      profilesGrid.appendChild(card);
    });
  });
}

function listenAdminPanels(){
  const qPending = query(collection(db,'profiles'), where('approved','==', false));
  onSnapshot(qPending, snap=>{
    pendingList.innerHTML = "";
    const arr=[];
    snap.forEach(s=>arr.push({id:s.id,...s.data()}));
    arr.sort((a,b)=>(b.createdAt||0)-(a.createdAt||0));
    if(arr.length===0){ pendingList.innerHTML=`<div class="text-gray-500">No pending profiles.</div>`; return; }

    arr.forEach(p=>{
      const li=document.createElement('li');
      li.className='border rounded p-3 flex gap-3 items-start justify-between';
      li.innerHTML=`
        <div class="flex gap-3 items-start">
          <img src="${esc(p.imageUrl)}" class="w-16 h-16 object-cover rounded"/>
          <div>
            <div class="font-medium">${esc(p.name)} · ${esc(p.age)}</div>
            <div class="text-sm text-gray-500">${esc(p.city||'')} · ${esc(p.gender)}</div>
            <div class="text-sm text-gray-600 mt-1">${esc(p.about||'')}</div>
          </div>
        </div>
        <div class="flex flex-col gap-2">
          <button class="approveBtn bg-green-600 text-white px-3 py-1 rounded" data-id="${p.id}">Approve</button>
          <button class="delBtn bg-red-500 text-white px-3 py-1 rounded" data-id="${p.id}">Delete</button>
        </div>
      `;
      pendingList.appendChild(li);
    });

    pendingList.querySelectorAll('.approveBtn').forEach(btn=>{ btn.onclick = async ()=>{ await updateDoc(doc(db,'profiles',btn.dataset.id),{approved:true}); }});
    pendingList.querySelectorAll('.delBtn').forEach(btn=>{ btn.onclick = async ()=>{ if(confirm('Delete this profile?')) await deleteDoc(doc(db,'profiles',btn.dataset.id)); }});
  });

  const qApproved = query(collection(db,'profiles'), where('approved','==', true));
  onSnapshot(qApproved, snap=>{
    approvedAdminList.innerHTML = "";
    const arr=[];
    snap.forEach(s=>arr.push({id:s.id,...s.data()}));
    arr.sort((a,b)=>(b.createdAt||0)-(a.createdAt||0));

    arr.forEach(p=>{
      const li=document.createElement('li');
      li.className='border rounded p-3 flex items-center justify-between';
      li.innerHTML=`
        <div class="flex items-center gap-3">
          <img src="${esc(p.imageUrl)}" class="w-12 h-12 object-cover rounded" />
          <div>
            <div class="font-medium">${esc(p.name)}</div>
            <div class="text-sm text-gray-500">${esc(p.city||'')}</div>
          </div>
        </div>
        <div>
          <button class="delApproved bg-red-500 text-white px-2 py-1 rounded" data-id="${p.id}">Delete</button>
        </div>
      `;
      approvedAdminList.appendChild(li);
    });

    approvedAdminList.querySelectorAll('.delApproved').forEach(b=>{ b.onclick=async()=>{ if(confirm('Delete this approved profile?')) await deleteDoc(doc(db,'profiles',b.dataset.id)); }});
  });
}

// ---------------- Admin Panel ----------------
adminBtn.addEventListener('click', ()=>{ adminPanel.classList.remove('hidden'); });
adminClose.addEventListener('click', ()=>{ adminPanel.classList.add('hidden'); });

// ---------------- Admin silent login ----------------
(async function tryAutoAdminSignIn(){
  if(!adminEmail || !adminPassword){ listenApprovedProfiles(); return; }
  try{ await signInWithEmailAndPassword(auth, adminEmail, adminPassword); }
  catch(err){ console.warn('Auto admin sign-in failed:', err.message||err); listenApprovedProfiles(); }
})();

onAuthStateChanged(auth,user=>{
  if(user){ currentAdmin=user; adminBtn.classList.remove('hidden'); listenAdminPanels(); }
  else{ currentAdmin=null; adminBtn.classList.add('hidden'); listenApprovedProfiles(); }
});

// ---------------- Notice ----------------
noticeForm?.addEventListener('submit', async e=>{
  e.preventDefault();
  const txt=(new FormData(noticeForm)).get('notice')?.trim();
  if(!txt) return;
  await addDoc(collection(db,'notices'),{ text:txt, timestamp:Date.now() });
  noticeForm.reset();
});

// ---------------- Filter ----------------
document.getElementById('filterBtn').addEventListener('click', listenApprovedProfiles);
document.getElementById('filterName').addEventListener('input', listenApprovedProfiles);
document.getElementById('filterGender').addEventListener('change', listenApprovedProfiles);

listenApprovedProfiles(); // initial load
</script>
</body>
</html>
